<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InWords.WebApi</name>
    </assembly>
    <members>
        <member name="T:InWords.WebApi.AppStart.Startup">
            <summary>
                Main startup class
            </summary>
        </member>
        <member name="M:InWords.WebApi.AppStart.Startup.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
                Startup constructor
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:InWords.WebApi.AppStart.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is the service configuration
            </summary>
            <summary>
                This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:InWords.WebApi.AppStart.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Hosting.IHostEnvironment)">
            <summary>
                This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1dot1.CardsGame.CustomLevelController.GetHistory">
            <summary>
                Use this to get last custom played games
            </summary>
            <deprecated>true</deprecated>
            <returns>History of users custom levels</returns>
            <response code="401">Unauthorized</response>
            <response code="200">OK</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1dot1.DictionaryController.GetTraining">
            <summary>
               Use v2 Dictionary.TrainingIds 
            </summary>
            <returns>Quantity of stars</returns>
            <response code="200">Words to be repeated</response>
            <response code="401">Unauthorized access</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1dot1.DictionaryController.GetTrainingIds">
            <summary>
                Use v2 Dictionary.Training
            </summary>
            <returns>Quantity of stars</returns>
            <response code="200">Word pairs Ids to be repeated</response>
            <response code="401">Unauthorized access</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1dot1.ProfileSettings.UploadAvatar(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
                Use this to update user avatar
            </summary>
            <returns>Quantity of stars</returns>
            <response code="200">Words to be repeated</response>
            <response code="401">Unauthorized access</response>
            <response code="417">File is zero length</response>
        </member>
        <member name="T:InWords.WebApi.Controllers.v1.UsersController">
            <inheritdoc />
            <summary>
                Everything about user
            </summary>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.UsersController.GetUsers(System.String)">
            <summary>
                Get user by nickname
            </summary>
            <returns>list of users like nickname</returns>
            <response code="200">OK</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.UsersController.GetUserId(System.Int32)">
            <summary>
                Get user by id
            </summary>
            <returns>user with id</returns>
            <response code="200">OK</response>
            <response code="401">Unauthorized</response>
            <response code="404">User not found</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.UsersController.GetUser">
            <summary>
                Get authorized user information
            </summary>
            <returns>user with id</returns>
            <response code="200">OK</response>
            <response code="401">Unauthorized</response>
            <response code="404"></response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.UsersController.PutUser(InWords.Data.Domains.User)">
            <summary>
                Update an existing user
            </summary>
            <returns>user with id</returns>
            <response code="200">OK</response>
            <response code="400">Model is not valid</response>
            <response code="401">Unauthorized</response>
            <response code="404"></response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.UsersController.AdminDeleteUser(System.Int32)">
            <summary>
                Administratively delete user
            </summary>
            <returns>user with id</returns>
            <response code="204">The user is successfully deleted</response>
            <response code="401">Unauthorized</response>
            <response code="403">Access for administrations only</response>
            <response code="404">User not found</response>
        </member>
        <member name="T:InWords.WebApi.Controllers.v1.ValuesController">
            <summary>
                Controller for test purposes
            </summary>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.ValuesController.GetUsersCount">
            <summary>
                Find out the number of registered users
            </summary>
            <returns>user with id</returns>
            <response code="200">OK</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.ValuesController.GetLogin">
            <summary>
                Get user by id
            </summary>
            <returns>user with id</returns>
            <response code="200">OK</response>
            <response code="401">Unauthorized</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.ValuesController.GetRole">
            <summary>
                To check admin rights (Admin only)
            </summary>
            <returns>user with id</returns>
            <response code="200">OK</response>
            <response code="401">Unauthorized</response>
            <response code="403">Access denied</response>
        </member>
        <member name="M:InWords.WebApi.Controllers.v1.ValuesController.#ctor(InWords.Data.InWordsDataContext,InWords.WebApi.Services.FtpLoader.Model.FileLoader)">
            <summary>
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.AuthController.OAuth2(InWords.Protobuf.OAuthTokenRequest)">
            <summary>
              Used to add words to the user's dictionary.
              The (localId) value should be zero (0) if you don't need to track words.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.AuthController.Basic(InWords.Protobuf.TokenRequest)">
            <summary>
            Basic access authentication using login, password
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.AuthController.Register(InWords.Protobuf.RegistrationRequest)">
            <summary>
            Registering a new user and sending them an email
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.DictionaryController.AddWords(InWords.Protobuf.AddWordsRequest)">
            <summary>
              Used to add words to the user's dictionary.
              The (localId) value should be zero (0) if you don't need to track words.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.DictionaryController.GetWords(InWords.Protobuf.GetWordsRequest)">
            <summary>
              Use this to get words and delete words that not exists
            </summary>
            <param name="request"></param>
            <returns></returns>
            <remarks>
            {"UserWordpairIds": [1,2,3]}
            </remarks>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.DictionaryController.UpdateWords(InWords.Protobuf.UpdateWordsRequest)">
            <summary>
            Deletes the old word and adds a new one. Use during editing
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.DictionaryController.DeleteWords(InWords.Protobuf.DeleteWordsRequest)">
            <summary>
            Use this do delete user's words
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.DictionaryController.Training">
            <summary>
            Use this to request pairs to learn
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.DictionaryController.TrainingIds">
            <summary>
            Use this to request pairs to learn
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.ProfileController.UpdateEmail(InWords.Protobuf.EmailChangeRequest)">
            <summary>
              Use this to request update user's email
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.ProfileController.ConfirmEmail(InWords.Protobuf.ConfirmEmailRequest)">
            <summary>
              Use this to confirm email code
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.ProfileController.ConfirmLink(System.String)">
            <summary>
            Input point for the link from the confirmation email.
            </summary>
            <param name="encryptLink"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.ProfileController.Delete(InWords.Protobuf.DeleteAccountRequest)">
            <summary>
            Deletes all user information without being able to return it. 
            When implementing this function, use the warning window.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.WordSetController.Register(InWords.Protobuf.WordSetWordsRequest)">
            <summary>
            This is to get word's in word set
            </summary>
            <param name="request"></param>
            <returns></returns>
            <remarks>
             
            . 
            Word's marked as hasAdded if user already has this word in the dictionary.               
             
            
            </remarks>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.WordSetController.ToDictionary(InWords.Protobuf.WordSetWordsRequest)">
            <summary>
            Adds all words from the set of words to the user's dictionary
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.WordSetController.GetSets">
            <summary>
            Returns a list of the official sets of words.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.WordSetController.GetLevels(System.Int32)">
            <summary>
            Returns the levels of the selected set of words
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Controllers.v2.WordSetController.GetLevelWords(System.Int32)">
            <summary>
            Use this to get word's in level
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Extensions.ServiceHandler.AuthorizeHandler``2(MediatR.IMediator,``0,Grpc.Core.ServerCallContext)">
            <summary>
            Grpc Authorize handler
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TReply"></typeparam>
            <param name="mediator"></param>
            <param name="request"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Extensions.ServiceHandler.AuthorizeHandler``2(MediatR.IMediator,``0,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Http authorize handler
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TReply"></typeparam>
            <param name="mediator"></param>
            <param name="request"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Extensions.StringExtensions.StripHTML(System.String)">
            <summary>
                This is to get raw text inside html/xml tags
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:InWords.WebApi.Extensions.Transfer.DescriptionInfoExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:InWords.WebApi.Extensions.Transfer.DescriptionInfoExtensions.GetRus(System.Collections.Generic.List{InWords.Data.DTO.Creation.DescriptionInfo})">
            <summary>
                Test method returning Russian description
            </summary>
            <param name="descriptionInfos"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Extensions.UserWordPairExtensions.ToWordTranslations(System.Collections.Generic.IEnumerable{InWords.Data.Domains.UserWordPair})">
            <summary>
                Convert UserWorkPair to WordTranslation
            </summary>
            <param name="userWordPairs"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Extensions.UserWordPairExtensions.ToWordTranslations(InWords.Data.Domains.UserWordPair)">
            <summary>
                Convert UserWorkPair to WordTranslation
            </summary>
            <param name="uwp"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Model.UserWordPair.IKnowledgeQualifier.Qualify">
            <summary>
            User's word pair ID and the quality of training
            </summary>
            <returns>Dictionary of id and quality</returns>
        </member>
        <member name="M:InWords.WebApi.Model.UserWordPair.BaseMemorization.Ebbinghaus(System.Int32,System.Double)">
            <summary>
                Implementation of
                <a href="https://en.wikipedia.org/wiki/Forgetting_curve">Forgetting curve</a>
            </summary>
            <param name="subconsciousLevel"></param>
            <param name="MemoryLevel"></param>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Services.Users.AccountUpdate.DeleteAccount.HandleRequest(InWords.WebApi.Services.Abstractions.AuthorizedRequestObject{InWords.Protobuf.DeleteAccountRequest,InWords.Protobuf.Empty},System.Threading.CancellationToken)">
            <summary>
            Delete account by id if exist
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentNullException">Account not found</exception>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Services.Users.Registration.UserRegistration.HandleRequest(InWords.WebApi.Services.Abstractions.RequestObject{InWords.Protobuf.RegistrationRequest,InWords.Protobuf.TokenReply},System.Threading.CancellationToken)">
            <summary>
            Use this is to register new yousers
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentNullException">If request is null</exception>
            <exception cref="T:System.ArgumentException">If email not exist</exception>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Services.Users.Registration.UserRegistration.IsAccountExist(System.String)">
            <summary>
            This method check if email exist
            </summary>
            <exception cref="T:System.ArgumentException">Email already exist</exception>
            <param name="email"></param>
        </member>
        <member name="M:InWords.WebApi.Services.Users.Token.UserToken.HandleRequest(InWords.WebApi.Services.Abstractions.RequestObject{InWords.Protobuf.TokenRequest,InWords.Protobuf.TokenReply},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:System.ArgumentNullException">Account not found</exception>
            <exception cref="T:System.ArgumentException">Password not match</exception>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Services.Email.EmailCodeVerificationService.HasCorrectCode(System.Int32,System.String,System.Int32)">
            <summary>
                This is to check code and if it's right code dispose all email verification.
                information about this user
            </summary>
            <param name="userId">System user's id</param>
            <param name="email">System user's email</param>
            <param name="code">Code from request</param>
            <returns>State if operation is success (true)/(false)</returns>
            <exception cref="T:System.ArgumentNullException">Email not found or not registred</exception>
        </member>
        <member name="M:InWords.WebApi.Services.Email.EmailSenders.EmailSender.SetText(System.String)">
            <summary>
                Reset body and set text message
            </summary>
            <param name="message">text message</param>
        </member>
        <member name="M:InWords.WebApi.Services.Email.EmailSenders.EmailSender.SetHTML(System.String,System.String)">
            <summary>
                Reset body and set html boyd and alttext
            </summary>
            <param name="html"></param>
            <param name="altText"></param>
        </member>
        <member name="T:InWords.WebApi.Services.Email.EmailVerifierService">
            <summary>
                This is register a user's profile for review by email
            </summary>
        </member>
        <member name="M:InWords.WebApi.Services.Email.EmailVerifierService.InstatiateVerifierMessage(InWords.Data.Domains.User,System.String)">
            <summary>
                Send message to user and register message in system
            </summary>
            <param name="user"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="T:InWords.WebApi.Services.Email.Template.EmailTemplateBase">
            <summary>
                Abstract class provide information about email to
                send it by <see cref="T:InWords.WebApi.Services.Email.EmailSenders.EmailTemplateSender" />
            </summary>
        </member>
        <member name="M:InWords.WebApi.Modules.DictionaryServiceHandler.Extentions.AddWordPairsExtentions.AddWordPairs(Microsoft.EntityFrameworkCore.DbSet{InWords.Data.Domains.WordPair},System.Collections.Generic.IEnumerable{InWords.Data.Domains.WordPair})">
            <summary>
            Return map of inverted keyPair
            </summary>
            <param name="wordPairs"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:InWords.WebApi.Module.InModule">
            <summary>
                This is to improve project infrastructure using reflection
                and file segregation
            </summary>
        </member>
        <member name="M:InWords.WebApi.Module.InModule.ConfigureIoc(Autofac.ContainerBuilder)">
            <summary>
                This is to segregate Ioc configuration layer from startup class
            </summary>
        </member>
        <member name="M:InWords.WebApi.Module.InModule.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is to provide service collection to configure
            </summary>
            <param name="services"></param>
            <returns>Service collection</returns>
        </member>
        <member name="M:InWords.WebApi.Module.InModule.ConfigureApp(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
               This is to provide ApplicationBuilder to configure
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:InWords.WebApi.Providers.AccountIdentityProvider.#ctor(InWords.Service.Auth.Interfaces.IJwtProvider,InWords.Data.Repositories.AccountRepository,InWords.Data.Repositories.UserRepository)">
            <summary>
                Create provider via repository
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:InWords.WebApi.Providers.AccountIdentityProvider.GetIdentity(InWords.Service.Auth.Models.BasicAuthClaims)">
            <summary>
                This is to check user identity [FromBody]
            </summary>
            <param name="user"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:InWords.WebApi.Providers.AccountIdentityProvider.GetIdentity(System.String,System.String)">
            <summary>
                This is to check user identity
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:InWords.WebApi.Providers.AccountIdentityProvider.GetIdentity(InWords.Data.Domains.Account)">
            <summary>
            </summary>
            <param name="account"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:InWords.WebApi.Swagger.RemoveVersionParameters">
            <summary>
                This is need to Remove Version Parameters from url path in Swagger UI.
                For example v{version}/get replace to v1.1/get
            </summary>
        </member>
        <member name="M:InWords.WebApi.Swagger.RemoveVersionParameters.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
                Operation filter interfere method
            </summary>
            <param name="operation"></param>
            <param name="context"></param>
        </member>
        <member name="M:InWords.WebApi.Swagger.SwaggerFactory.GetApiVersions(System.Reflection.MemberInfo)">
            <summary>
                This is to ger api version from member info to swagger configuration
            </summary>
            <param name="methodInfo"></param>
            <returns>ApiVersions</returns>
        </member>
        <member name="M:InWords.WebApi.Swagger.SwaggerFactory.ConfigureSwaggerComments(Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions)">
            <summary>
                This is to enable swagger external dev xml comments.
                Warning! To use this enable xml comments output
            </summary>
            <param name="c"></param>
        </member>
    </members>
</doc>
