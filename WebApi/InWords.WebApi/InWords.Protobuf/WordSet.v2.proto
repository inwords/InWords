syntax = "proto3";
option csharp_namespace = "InWords.Protobuf";

option java_multiple_files = true;
option java_package = "ru.inwords.inwords.proto.word_set";
option java_outer_classname = "WordSetProto";

package WordSet.v2;
import "Common.v2.proto";

// The greeting service definition.
service WordSetProvider {
	// Sends a greeting
	rpc GetSets (Common.v2.Empty) returns (WordSetReply);
	rpc GetFullSets (SetsCountRequest) returns (WordSetReply);
	rpc GetWordsList (WordSetWordsRequest) returns (WordSetWordsReply);
	rpc ToDictionary (WordSetWordsRequest) returns (Common.v2.Empty);
	rpc GetLevels (GetLevelsRequest) returns (GetLevelsReply);
	rpc GetLevelWords (GetLevelWordsRequest) returns (GetLevelWordsReply);
	rpc History (Common.v2.Empty) returns (GameScoreReply);
	rpc Estimate (TrainingDataRequest) returns (TrainingScoreReply);
}

message SetsCountRequest{
	int32 offset = 1;
	int32 limit = 2;
}

message TrainingScoreReply{
	message TrainigScore{
		message OpenedCards{
			int32 score = 1;
		}
		message OpenedAudioCards{
			int32 score = 1;
		}
		message OpenedAudioCardsTwo{
			int32 score = 1;
		}
		message ClosedCards{
			int32 score = 1;
		}
		message ClosedAudioCards{
			int32 score = 1;
		}
		message ClosedAudioCardsTwo{
			int32 score = 1;
		}
		message Audio{
			int32 score = 1;
		}
		int32 gameLevelId = 1;
		int32 score = 2;
		OpenedCards openedCards = 3;
		OpenedAudioCards openedAudioCards = 4;
		OpenedAudioCardsTwo openedAudioCards2= 5;
		ClosedCards closedCards = 6;
		ClosedAudioCards closedAudioCards = 7;
		ClosedAudioCardsTwo closedAudioCards2 = 8;
		Audio audio = 9;
	}
	repeated TrainigScore Scores = 1;
}

message TrainingDataRequest{
	message Training{
		message OpenedCardsMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		message OpenedAudioCardsMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		message OpenedAudioCardsTwoMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		message ClosedCardsMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		message ClosedAudioCardsMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		message ClosedAudioCardsTwoMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		message AudioMetric{
			map<int32,int32> wordIdOpenCount = 1;		
		}
		int32 gameLevelId = 1;
		OpenedCardsMetric openedCardsMetric = 2;
		OpenedAudioCardsMetric openedAudioCardsMetric = 3;
		OpenedAudioCardsTwoMetric openedAudioCards2Metric = 4;
		ClosedCardsMetric closedCardsMetric = 5;
		ClosedAudioCardsMetric closedAudioCardsMetric = 6;
		ClosedAudioCardsTwoMetric closedAudioCards2Metric = 7;
		AudioMetric audioMetric = 8;
	}
	repeated Training metrics = 1;
}

message GameScoreReply{
	message ConcreteGameScore {
		int32 levelId = 1;
		int32 stars = 2;
		bool isAvailable = 3;
		int32 wordsCount = 4;
		string dateTime = 5;
	}
	repeated ConcreteGameScore levels = 1;
}

message GetLevelWordsRequest{
	int32 levelId = 1;
}

message LevelWord{
	int32 userWordPairId = 1;
	string ForeignWord = 2;
	string NativeWord = 3;
}

message GetLevelWordsReply{
	repeated LevelWord words = 1;
}

message GetLevelsRequest{
	int32 wordSetId = 1;
}

message GetLevelsReply{
	repeated LevelReply levels = 1;
}

message LevelReply {
	int32 levelId = 1;
	int32 stars = 2;
	bool isAvailable = 3;
	int32 level = 4;
	int32 score = 5;
}

message WordSetReply{
	message WordSetInfo{
		int32 id = 1;
		string title = 2;
		string description = 3;
		string picture = 4;
		repeated LevelReply levels = 5;
	}
	repeated WordSetInfo wordSets = 1;
}

// The request message containing the user's credentials.
message WordSetWordsRequest {
	int32 WordSetId = 1;
}

message WordSetWordsReply {
	repeated WordSetWord Words = 1;
}

// The response message containing the Token.
message WordSetWord {
	int32 WordPairId = 1;
	bool HasAdded = 2;
	string WordForeign = 3;
	string WordNative = 4;
}
