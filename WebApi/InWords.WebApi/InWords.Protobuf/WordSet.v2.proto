syntax = "proto3";
option csharp_namespace = "InWords.Protobuf";

option java_multiple_files = true;
option java_package = "ru.inwords.inwords.proto.word_set";
option java_outer_classname = "WordSetProto";

package WordSet.v2;
import "Common.v2.proto";

// The greeting service definition.
service WordSetProvider {
	// Sends a greeting
	rpc GetSets (Common.v2.Empty) returns (WordSetReply);
	rpc GetWordsList (WordSetWordsRequest) returns (WordSetWordsReply);
	rpc ToDictionary (WordSetWordsRequest) returns (Common.v2.Empty);
	rpc GetLevels (GetLevelsRequest) returns (GetLevelsReply);
	rpc GetLevelWords (GetLevelWordsRequest) returns (GetLevelWordsReply);
	rpc History (Common.v2.Empty) returns (GameScoreReply);
	rpc Estimate (TrainingDataRequest) returns (TrainingScoreReply);
}

message TrainingScoreReply{
	message TraininScore{
		message CardsStatus{
			int32 score = 1;
		}
		message AuditionStatus{
			int32 score = 1;
		}
		int32 gameLevelId = 1;
		CardsStatus cardsStatus = 2;
		AuditionStatus auditionStatus = 3;
	}
	repeated TraininScore Scores = 1;
}

message TrainingDataRequest{
	message TrainingMetric{
		int32 gameLevelId = 1;
		map<int32,int32> AuditionWordIdOpenCount = 2;
		map<int32,int32> CardsWordIdOpenCount = 3;
	}
	repeated TrainingMetric Metrics = 1;
}

message GameScoreReply{
	message ConcreteGameScore {
		int32 levelId = 1;
		int32 stars = 2;
		bool isAvailable = 3;
		int32 gameType = 4;
	}
	repeated ConcreteGameScore levels = 1;
}

message GetLevelWordsRequest{
	int32 levelId = 1;
}

message LevelWord{
	int32 userWordPairId = 1;
	string ForeignWord = 2;
	string NativeWord = 3;
}

message GetLevelWordsReply{
	repeated LevelWord words = 1;
}

message GetLevelsRequest{
	int32 wordSetId = 1;
}

message GetLevelsReply{
	repeated LevelReply levels = 1;
}

message LevelReply {
	int32 levelId = 1;
	int32 stars = 2;
	bool isAvailable = 3;
	int32 level = 4;
}

message WordSetReply{
	message WordSetInfo{
		int32 id = 1;
		string title = 2;
		string description = 3;
		string picture = 4;
	}
	repeated WordSetInfo wordSets = 1;
}

// The request message containing the user's credentials.
message WordSetWordsRequest {
	int32 WordSetId = 1;
}

message WordSetWordsReply {
	repeated WordSetWord Words = 1;
}

// The response message containing the Token.
message WordSetWord {
	int32 WordPairId = 1;
	bool HasAdded = 2;
	string WordForeign = 3;
	string WordNative = 4;
}
