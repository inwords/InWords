# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight Web API build
  branches:
    include:
    - develop
pr:
  branches:
    include:
    - webapi-release
    - develop
  paths:
    include:
    - WebApi/*
trigger:
  branches:
    include:
    - webapi-release
    - develop
  paths:
    include:
    - WebApi/*
    
pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: '-c Release'
  testConfiguration: '$(buildConfiguration) --collect "Code coverage" '

# Build Stage
steps:
- task: UseDotNet@2
  displayName: 'Install .net core 3.1.101'
  inputs:
    packageType: sdk
    version: '3.1.101'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: NuGetCommand@2
  displayName: 'NuGet restore packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/InWords.WebApi/InWords.WebApi.sln'
    feedsToUse: 'select'
    vstsFeed: 'http://nuget.org/'

- task: DotNetCoreCLI@2
  displayName: 'build any OS Release'
  inputs:
    command: build
    projects: '**/InWords.WebApi/InWords.WebApi.csproj'
    arguments: '$(buildConfiguration)'

# Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\'
    projects: 'D:\a\1\s\WebApi\InWords.WebApi\**\*Tests.csproj'
    nobuild: true

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:D:\a\1\s\**\coverage.cobertura.xml -tag:$(Build.BuildNumber) -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'


# Publish artifacts stage

- task: PublishPipelineArtifact@1
  displayName: 'Publish artifacts: _WebApiBuild'
  inputs:
    path: $(System.DefaultWorkingDirectory)/WebApi/InWords.WebApi/InWords.WebApi/bin/Release/netcoreapp3.1/
    artifact: _WebApiBuild
  condition: succeeded()

- task: PublishPipelineArtifact@1
  displayName: 'Publish artifacts: _WebApiTests'
  inputs:
    path: $(System.DefaultWorkingDirectory)/WebApi/
    artifact: _WebApiTests
  condition: succeeded()
