apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'

android {
    compileSdkVersion targetSdk
    defaultConfig {
        applicationId "ru.inwords.inwords"
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode 9
        versionName "1.5"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_URL", "\"https://api.inwords.ru/\""
        buildConfigField "String", "TTS_GOOGLE_API_URL", "\"https://texttospeech.googleapis.com\""
        buildConfigField "String", "POLICY_PRIVACY_URL", "\"https://inwords.ru/policy/privacy.html\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    androidExtensions {
        experimental = true //TODO its now no need to use this to Parcelize, but it shows warning otherwise
    }

    kapt { generateStubs = true }

    testOptions {
        unitTests.all {
            // Always run tests, even when nothing changed.
            dependsOn 'clean'

            // Show test results.
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/INDEX.LIST'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(path: ':flipview')
    implementation project(path: ':shimmer_recycler')

    implementation 'com.google.firebase:firebase-core:17.1.0'

    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //support
    implementation "androidx.appcompat:appcompat:$versions.ANDROID_X"

    implementation "androidx.recyclerview:recyclerview:$versions.RECYCLER"
    implementation "androidx.constraintlayout:constraintlayout:$versions.CONSTRAINT_LAYOUT"

    //preference
    implementation 'androidx.preference:preference-ktx:1.1.0-rc01'

    //android core ktx
    implementation 'androidx.core:core-ktx:1.0.2'

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.NAVIGATION"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.NAVIGATION"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$versions.RX_JAVA"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.RX_ANDROID"
    implementation "com.jakewharton.rxbinding2:rxbinding:$versions.RX_BINDING"
    implementation "com.jakewharton.rxbinding2:rxbinding-design:$versions.RX_BINDING"

    //Fresco
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation "com.facebook.fresco:imagepipeline-okhttp3:2.0.0"

    //Shimmer
    implementation "com.facebook.shimmer:shimmer:$versions.SHIMMER"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.RETROFIT"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.RETROFIT"
    implementation "com.squareup.retrofit2:converter-gson:$versions.RETROFIT"
    //implementation "com.squareup.retrofit2:retrofit-mock:$versions.RETROFIT"

    implementation "com.squareup.okhttp3:okhttp:$versions.OK_HTTP"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.OK_HTTP"

    // Room components
    implementation "androidx.room:room-runtime:$versions.ROOM"
    implementation "androidx.room:room-rxjava2:$versions.ROOM"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'
    kapt "androidx.room:room-compiler:$versions.ROOM"

    //androidTestImplementation "android.arch.persistence.room:testing:$versions.ROOM"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.LIFECYCLE"
    kapt "androidx.lifecycle:lifecycle-compiler:$versions.LIFECYCLE"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.DAGGER"
    kapt "com.google.dagger:dagger-compiler:$versions.DAGGER"
    implementation "com.google.dagger:dagger-android:$versions.DAGGER"

    // if you use the support libraries
    implementation "com.google.dagger:dagger-android-support:$versions.DAGGER"
    kapt "com.google.dagger:dagger-android-processor:$versions.DAGGER"

    androidTestImplementation 'androidx.test:runner:1.3.0-alpha01'

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.2"

    testImplementation "io.mockk:mockk:1.9.3"
    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
