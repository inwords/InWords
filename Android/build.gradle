// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // SDK and Build tools version
        minSdk = 21
        targetSdk = 29
        buildTools = "29.0.6"

        kotlin_version = '1.5.10'

        jacoco_version = '0.8.7'

        versions = [
                ANDROID_X        : '1.3.0',
                MATERIAL_COMP    : '1.0.0',
                CONSTRAINT_LAYOUT: '2.0.4',
                NAVIGATION       : '2.3.5',
                WORK_MANAGER     : '2.5.0',
                CORE_KTX         : '1.5.0',
                RX_JAVA          : '2.2.21',
                RX_ANDROID       : '2.1.1',
                RX_BINDING       : '2.2.0',
                RETROFIT         : '2.9.0',
                OK_HTTP          : '4.9.1',
                ROOM             : '2.3.0',
                LIFECYCLE        : '2.3.1',
                PREFERENCE       : '1.1.1',
                DAGGER           : '2.36',
                SHIMMER          : '0.4.0',
                RECYCLER         : '1.2.0',
                FRAGMENT         : '1.3.4',
                PROTOC           : '3.11.4',
                GRPC             : '1.37.1',
                GSON             : '2.8.6',
                GROUPIE          : '2.9.0',
                ANDROIDX_TEST    : '1.3.0',
                ANDROIDX_TEST_EXT: '1.1.2',
                JUNIT_JUPITER    : '5.7.1',
                MOCKK            : '1.10.6'
        ]
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$rootProject.ext.kotlin_version"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:1.6.2.0"
        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.6.1'
        classpath "org.jacoco:org.jacoco.core:0.8.5"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.NAVIGATION"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.16"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects { subproject ->
    subproject.plugins.whenPluginAdded { plugin ->
        if (isAndroidLibraryOrAppPlugin(plugin)) {
            subproject.apply from: "${project.rootDir.absolutePath}/android-subproject.gradle"
        }
    }
}

static boolean isAndroidLibraryOrAppPlugin(Plugin plugin) {
    plugin.getClass().canonicalName in ["com.android.build.gradle.LibraryPlugin",
                                        "com.android.build.gradle.AppPlugin"]
}

final def (JacocoMerge mergeTask, JacocoReport mergedReportTask) = addJacocoMergeToRootProject(rootProject)
ext.mergeTask = mergeTask
ext.mergedReportTask = mergedReportTask

protected static addJacocoMergeToRootProject(final Project project) {
    project.plugins.apply('jacoco')

    project.jacoco {
        toolVersion = project.ext.jacoco_version
    }

    def mergeTask = project.task("mergeJacocoReports", type: JacocoMerge) {
        executionData project.files().asFileTree // Start with an empty collection.
        destinationFile project.file("${project.buildDir}/jacoco/mergedReport.exec")

        doFirst {
            // Filter non existing files.
            def realExecutionData = project.files()

            executionData.each {
                if (it.exists()) {
                    realExecutionData.setFrom(project.files(it) + realExecutionData.files)
                }
            }

            executionData = realExecutionData
        }
    }

    def mergedReportTask = project.task("jacocoTestReportMerged", type: JacocoReport, dependsOn: mergeTask) {
        group = "Reporting"

        executionData mergeTask.destinationFile

        reports {
            html.enabled = true
            xml.enabled = true
        }

        // Start with empty collections.
        getClassDirectories().from(project.files())
        getAdditionalSourceDirs().from(project.files())
        getSourceDirectories().from(project.files())
    }

    return [mergeTask, mergedReportTask]
}