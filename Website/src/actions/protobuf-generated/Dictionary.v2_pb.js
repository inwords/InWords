// source: Dictionary.v2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Dictionary.v2.AddWordReply', null, global);
goog.exportSymbol('proto.Dictionary.v2.AddWordRequest', null, global);
goog.exportSymbol('proto.Dictionary.v2.AddWordsReply', null, global);
goog.exportSymbol('proto.Dictionary.v2.AddWordsRequest', null, global);
goog.exportSymbol('proto.Dictionary.v2.GetWordsRequest', null, global);
goog.exportSymbol('proto.Dictionary.v2.WordReply', null, global);
goog.exportSymbol('proto.Dictionary.v2.WordsReply', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.GetWordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Dictionary.v2.GetWordsRequest.repeatedFields_, null);
};
goog.inherits(proto.Dictionary.v2.GetWordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.GetWordsRequest.displayName = 'proto.Dictionary.v2.GetWordsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.WordsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Dictionary.v2.WordsReply.repeatedFields_, null);
};
goog.inherits(proto.Dictionary.v2.WordsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.WordsReply.displayName = 'proto.Dictionary.v2.WordsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.WordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Dictionary.v2.WordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.WordReply.displayName = 'proto.Dictionary.v2.WordReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.AddWordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Dictionary.v2.AddWordsRequest.repeatedFields_, null);
};
goog.inherits(proto.Dictionary.v2.AddWordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.AddWordsRequest.displayName = 'proto.Dictionary.v2.AddWordsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.AddWordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Dictionary.v2.AddWordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.AddWordRequest.displayName = 'proto.Dictionary.v2.AddWordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.AddWordsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Dictionary.v2.AddWordsReply.repeatedFields_, null);
};
goog.inherits(proto.Dictionary.v2.AddWordsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.AddWordsReply.displayName = 'proto.Dictionary.v2.AddWordsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.v2.AddWordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Dictionary.v2.AddWordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.v2.AddWordReply.displayName = 'proto.Dictionary.v2.AddWordReply';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Dictionary.v2.GetWordsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.GetWordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.GetWordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.GetWordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.GetWordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userwordpairidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.GetWordsRequest}
 */
proto.Dictionary.v2.GetWordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.GetWordsRequest;
  return proto.Dictionary.v2.GetWordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.GetWordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.GetWordsRequest}
 */
proto.Dictionary.v2.GetWordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setUserwordpairidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.GetWordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.GetWordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.GetWordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.GetWordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserwordpairidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 UserWordpairIds = 1;
 * @return {!Array<number>}
 */
proto.Dictionary.v2.GetWordsRequest.prototype.getUserwordpairidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Dictionary.v2.GetWordsRequest} returns this
 */
proto.Dictionary.v2.GetWordsRequest.prototype.setUserwordpairidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Dictionary.v2.GetWordsRequest} returns this
 */
proto.Dictionary.v2.GetWordsRequest.prototype.addUserwordpairids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary.v2.GetWordsRequest} returns this
 */
proto.Dictionary.v2.GetWordsRequest.prototype.clearUserwordpairidsList = function() {
  return this.setUserwordpairidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Dictionary.v2.WordsReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.WordsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.WordsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.WordsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.WordsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    toaddList: jspb.Message.toObjectList(msg.getToaddList(),
    proto.Dictionary.v2.WordReply.toObject, includeInstance),
    todeleteList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.WordsReply}
 */
proto.Dictionary.v2.WordsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.WordsReply;
  return proto.Dictionary.v2.WordsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.WordsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.WordsReply}
 */
proto.Dictionary.v2.WordsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Dictionary.v2.WordReply;
      reader.readMessage(value,proto.Dictionary.v2.WordReply.deserializeBinaryFromReader);
      msg.addToadd(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setTodeleteList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.WordsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.WordsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.WordsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.WordsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToaddList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Dictionary.v2.WordReply.serializeBinaryToWriter
    );
  }
  f = message.getTodeleteList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated WordReply ToAdd = 1;
 * @return {!Array<!proto.Dictionary.v2.WordReply>}
 */
proto.Dictionary.v2.WordsReply.prototype.getToaddList = function() {
  return /** @type{!Array<!proto.Dictionary.v2.WordReply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Dictionary.v2.WordReply, 1));
};


/**
 * @param {!Array<!proto.Dictionary.v2.WordReply>} value
 * @return {!proto.Dictionary.v2.WordsReply} returns this
*/
proto.Dictionary.v2.WordsReply.prototype.setToaddList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Dictionary.v2.WordReply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Dictionary.v2.WordReply}
 */
proto.Dictionary.v2.WordsReply.prototype.addToadd = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Dictionary.v2.WordReply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary.v2.WordsReply} returns this
 */
proto.Dictionary.v2.WordsReply.prototype.clearToaddList = function() {
  return this.setToaddList([]);
};


/**
 * repeated int32 ToDelete = 2;
 * @return {!Array<number>}
 */
proto.Dictionary.v2.WordsReply.prototype.getTodeleteList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Dictionary.v2.WordsReply} returns this
 */
proto.Dictionary.v2.WordsReply.prototype.setTodeleteList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Dictionary.v2.WordsReply} returns this
 */
proto.Dictionary.v2.WordsReply.prototype.addTodelete = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary.v2.WordsReply} returns this
 */
proto.Dictionary.v2.WordsReply.prototype.clearTodeleteList = function() {
  return this.setTodeleteList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.WordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.WordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.WordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.WordReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    userwordpair: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wordforeign: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wordnative: jspb.Message.getFieldWithDefault(msg, 3, ""),
    period: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.WordReply}
 */
proto.Dictionary.v2.WordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.WordReply;
  return proto.Dictionary.v2.WordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.WordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.WordReply}
 */
proto.Dictionary.v2.WordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserwordpair(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordforeign(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordnative(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.WordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.WordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.WordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.WordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserwordpair();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWordforeign();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWordnative();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 UserWordPair = 1;
 * @return {number}
 */
proto.Dictionary.v2.WordReply.prototype.getUserwordpair = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Dictionary.v2.WordReply} returns this
 */
proto.Dictionary.v2.WordReply.prototype.setUserwordpair = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string WordForeign = 2;
 * @return {string}
 */
proto.Dictionary.v2.WordReply.prototype.getWordforeign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Dictionary.v2.WordReply} returns this
 */
proto.Dictionary.v2.WordReply.prototype.setWordforeign = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string WordNative = 3;
 * @return {string}
 */
proto.Dictionary.v2.WordReply.prototype.getWordnative = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Dictionary.v2.WordReply} returns this
 */
proto.Dictionary.v2.WordReply.prototype.setWordnative = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 Period = 4;
 * @return {number}
 */
proto.Dictionary.v2.WordReply.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Dictionary.v2.WordReply} returns this
 */
proto.Dictionary.v2.WordReply.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Dictionary.v2.AddWordsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.AddWordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.AddWordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.AddWordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.Dictionary.v2.AddWordRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.AddWordsRequest}
 */
proto.Dictionary.v2.AddWordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.AddWordsRequest;
  return proto.Dictionary.v2.AddWordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.AddWordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.AddWordsRequest}
 */
proto.Dictionary.v2.AddWordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Dictionary.v2.AddWordRequest;
      reader.readMessage(value,proto.Dictionary.v2.AddWordRequest.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.AddWordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.AddWordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.AddWordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Dictionary.v2.AddWordRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AddWordRequest Words = 1;
 * @return {!Array<!proto.Dictionary.v2.AddWordRequest>}
 */
proto.Dictionary.v2.AddWordsRequest.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.Dictionary.v2.AddWordRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Dictionary.v2.AddWordRequest, 1));
};


/**
 * @param {!Array<!proto.Dictionary.v2.AddWordRequest>} value
 * @return {!proto.Dictionary.v2.AddWordsRequest} returns this
*/
proto.Dictionary.v2.AddWordsRequest.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Dictionary.v2.AddWordRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Dictionary.v2.AddWordRequest}
 */
proto.Dictionary.v2.AddWordsRequest.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Dictionary.v2.AddWordRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary.v2.AddWordsRequest} returns this
 */
proto.Dictionary.v2.AddWordsRequest.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.AddWordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.AddWordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.AddWordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    localid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wordforeign: jspb.Message.getFieldWithDefault(msg, 2, ""),
    wordnative: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.AddWordRequest}
 */
proto.Dictionary.v2.AddWordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.AddWordRequest;
  return proto.Dictionary.v2.AddWordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.AddWordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.AddWordRequest}
 */
proto.Dictionary.v2.AddWordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLocalid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordforeign(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWordnative(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.AddWordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.AddWordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.AddWordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWordforeign();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getWordnative();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 LocalId = 1;
 * @return {number}
 */
proto.Dictionary.v2.AddWordRequest.prototype.getLocalid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Dictionary.v2.AddWordRequest} returns this
 */
proto.Dictionary.v2.AddWordRequest.prototype.setLocalid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string WordForeign = 2;
 * @return {string}
 */
proto.Dictionary.v2.AddWordRequest.prototype.getWordforeign = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Dictionary.v2.AddWordRequest} returns this
 */
proto.Dictionary.v2.AddWordRequest.prototype.setWordforeign = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string WordNative = 3;
 * @return {string}
 */
proto.Dictionary.v2.AddWordRequest.prototype.getWordnative = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Dictionary.v2.AddWordRequest} returns this
 */
proto.Dictionary.v2.AddWordRequest.prototype.setWordnative = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Dictionary.v2.AddWordsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.AddWordsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.AddWordsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.AddWordsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordidsList: jspb.Message.toObjectList(msg.getWordidsList(),
    proto.Dictionary.v2.AddWordReply.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.AddWordsReply}
 */
proto.Dictionary.v2.AddWordsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.AddWordsReply;
  return proto.Dictionary.v2.AddWordsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.AddWordsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.AddWordsReply}
 */
proto.Dictionary.v2.AddWordsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Dictionary.v2.AddWordReply;
      reader.readMessage(value,proto.Dictionary.v2.AddWordReply.deserializeBinaryFromReader);
      msg.addWordids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.AddWordsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.AddWordsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.AddWordsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Dictionary.v2.AddWordReply.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AddWordReply WordIds = 1;
 * @return {!Array<!proto.Dictionary.v2.AddWordReply>}
 */
proto.Dictionary.v2.AddWordsReply.prototype.getWordidsList = function() {
  return /** @type{!Array<!proto.Dictionary.v2.AddWordReply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Dictionary.v2.AddWordReply, 1));
};


/**
 * @param {!Array<!proto.Dictionary.v2.AddWordReply>} value
 * @return {!proto.Dictionary.v2.AddWordsReply} returns this
*/
proto.Dictionary.v2.AddWordsReply.prototype.setWordidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Dictionary.v2.AddWordReply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Dictionary.v2.AddWordReply}
 */
proto.Dictionary.v2.AddWordsReply.prototype.addWordids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Dictionary.v2.AddWordReply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary.v2.AddWordsReply} returns this
 */
proto.Dictionary.v2.AddWordsReply.prototype.clearWordidsList = function() {
  return this.setWordidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.v2.AddWordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.v2.AddWordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.v2.AddWordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    localid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.v2.AddWordReply}
 */
proto.Dictionary.v2.AddWordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.v2.AddWordReply;
  return proto.Dictionary.v2.AddWordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.v2.AddWordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.v2.AddWordReply}
 */
proto.Dictionary.v2.AddWordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLocalid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.v2.AddWordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.v2.AddWordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.v2.AddWordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.v2.AddWordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 LocalId = 1;
 * @return {number}
 */
proto.Dictionary.v2.AddWordReply.prototype.getLocalid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Dictionary.v2.AddWordReply} returns this
 */
proto.Dictionary.v2.AddWordReply.prototype.setLocalid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 ServerId = 2;
 * @return {number}
 */
proto.Dictionary.v2.AddWordReply.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Dictionary.v2.AddWordReply} returns this
 */
proto.Dictionary.v2.AddWordReply.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.Dictionary.v2);
